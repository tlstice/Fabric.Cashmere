{
    "src/bit/change-case-pipe/change-case-lib.ts": "import {InjectionToken} from '@angular/core';\nimport * as changeCaseLib from 'change-case';\n\nexport const changeCase = changeCaseLib;\nexport type ChangeCaseLib = typeof changeCaseLib;\nexport const CHANGE_CASE = new InjectionToken('change-case');\n",
    "src/bit/change-case-pipe/change-case-pipe.md": "##### Overview\n\nThe `changeCase` pipe is used to transform the letter casing of the input string to the specified casing.\n\nThis pipe is a thin wrapper for the `change-case` NPM package:\n<https://www.npmjs.com/package/change-case>\n\n&nbsp;\n\n##### API\n\n```ts\ntransform(value: string, caseFunction: string): string\n```\n\n`value`: the `string` value to transform\n\n`caseFunction`: which function (from the `change-case` package) to call to transform the text\n\n&nbsp;\n\n##### Installing the Pipe\n\nAs the pipe has a dependency on the `change-case` package, it is not included in the main Cashmere NPM package. To\ninstall this pipe, use the following NPM command:\n\n```\nnpm i @bit/healthcatalyst.cashmere.change-case-pipe\n```\n\nNote that you will need to configure the `@bit` scope in your project's `.npmrc` file to access the Bit repository:\n\n.npmrc\n\n```\n@bit:registry=https://node.bit.dev\n```\n\n&nbsp;\n\n##### Importing the Change Case Pipe\n\nTo use the `ChangeCasePipe`, import the `ChangeCasePipeModule` into your app's `CashmereModule` (which in turn is imported into your app):\n\n```ts\nimport {NgModule} from '@angular/core';\nimport {ChangeCasePipeModule} from '@bit/healthcatalyst.cashmere.change-case-pipe';\n\n@NgModule({\n    exports: [ChangeCasePipeModule]\n})\nexport class CashmereModule {}\n```\n\n&nbsp;\n\n##### Usage\n\n```html\n{{ 'Sample text' | changeCase : 'pascalCase' }}\n<!-- will output 'SampleText' -->\n{{ 'Sample text' | changeCase : 'paramCase' }}\n<!-- will output 'sample-text' -->\n```\n\nThe available case transformation functions will depend on the version of `change-case` you have installed in your project.\nCheck the documentation for more details: <https://www.npmjs.com/package/change-case>\n",
    "src/bit/change-case-pipe/change-case-pipe.module.ts": "import {NgModule} from '@angular/core';\nimport {ChangeCasePipe} from './change-case.pipe';\nimport {CHANGE_CASE, changeCase} from './change-case-lib';\n\n@NgModule({\n    declarations: [ChangeCasePipe],\n    providers: [{provide: CHANGE_CASE, useValue: changeCase}],\n    exports: [ChangeCasePipe]\n})\nexport class ChangeCasePipeModule {}\n",
    "src/bit/change-case-pipe/change-case.pipe.spec.ts": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {ChangeCasePipe} from './change-case.pipe';\nimport {ChangeCaseLib} from './change-case-lib';\n\ndescribe('ChangeCasePipe', () => {\n    let pipe: ChangeCasePipe;\n    let changeCaseLib: ChangeCaseLib;\n\n    beforeEach(() => {\n        changeCaseLib = {pascalCase: jest.fn()} as any;\n        pipe = new ChangeCasePipe(changeCaseLib);\n    });\n\n    describe('when provided a valid case parameter', () => {\n        it('(pascalCase) should transform the input to PascalCase', () => {\n            pipe.transform('hello world', 'pascalCase');\n            expect(changeCaseLib.pascalCase).toHaveBeenCalled();\n        });\n    });\n\n    describe('when provided an invalid case parameter', () => {\n        it('should throw an error', () => {\n            expect(() => pipe.transform('hello world', 'insideOutCase' as any)).toThrow();\n        });\n    });\n});\n",
    "src/bit/change-case-pipe/change-case.pipe.ts": "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {PipeTransform, Pipe, Inject} from '@angular/core';\nimport {ChangeCaseLib, CHANGE_CASE} from './change-case-lib';\n\n@Pipe({name: 'changeCase', pure: true})\nexport class ChangeCasePipe implements PipeTransform {\n    constructor(@Inject(CHANGE_CASE) private changeCase: ChangeCaseLib) {}\n\n    transform(value: string, caseFnName: string): string {\n        // coerce input to a string\n        value = (value === null || value === undefined ? '' : value).toString();\n        // retrieve the case transform function from the change-case library\n        const caseFn = (this.changeCase as any)[caseFnName];\n        if (typeof caseFn !== 'function') {\n            throw new Error(\n                `Invalid case function: ${caseFnName}. This pipe only supports function names from the change-case NPM package.`\n            );\n        }\n\n        return caseFn(value);\n    }\n}\n",
    "src/bit/change-case-pipe/index.ts": "export * from './change-case-pipe.module';\nexport * from './change-case.pipe';\n",
    "src/bit/change-case-pipe/package.json": "{\n  \"es2015\": \"fesm2015/bit-healthcatalyst.cashmere.change-case-pipe.js\",\n  \"esm5\": \"esm5/bit-healthcatalyst.cashmere.change-case-pipe.js\",\n  \"esm2015\": \"esm2015/bit-healthcatalyst.cashmere.change-case-pipe.js\",\n  \"fesm5\": \"fesm5/bit-healthcatalyst.cashmere.change-case-pipe.js\",\n  \"fesm2015\": \"fesm2015/bit-healthcatalyst.cashmere.change-case-pipe.js\",\n  \"module\": \"fesm5/bit-healthcatalyst.cashmere.change-case-pipe.js\",\n  \"typings\": \"bit-healthcatalyst.cashmere.change-case-pipe.d.ts\"\n}\n",
    ".npmrc": "@bit:registry=https://node.bit.dev",
    "angular.json": "{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n        \"project-template\": {\n            \"root\": \"\",\n            \"sourceRoot\": \"src\",\n            \"projectType\": \"application\",\n            \"prefix\": \"app\",\n            \"schematics\": {\n                \"@schematics/angular:component\": {\n                    \"styleext\": \"scss\"\n                }\n            },\n            \"architect\": {\n                \"build\": {\n                    \"builder\": \"@angular-devkit/build-angular:browser\",\n                    \"options\": {\n                        \"outputPath\": \"dist/project-template\",\n                        \"index\": \"src/index.html\",\n                        \"main\": \"src/main.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.app.json\",\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n                        \"styles\": [\"src/styles.scss\"]\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"fileReplacements\": [\n                                {\n                                    \"replace\": \"src/environments/environment.ts\",\n                                    \"with\": \"src/environments/environment.prod.ts\"\n                                }\n                            ],\n                            \"optimization\": true,\n                            \"outputHashing\": \"all\",\n                            \"sourceMap\": false,\n                            \"extractCss\": true,\n                            \"namedChunks\": false,\n                            \"aot\": true,\n                            \"extractLicenses\": true,\n                            \"vendorChunk\": false,\n                            \"buildOptimizer\": true,\n                            \"budgets\": [\n                                {\n                                    \"type\": \"initial\",\n                                    \"maximumWarning\": \"2mb\",\n                                    \"maximumError\": \"5mb\"\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"serve\": {\n                    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"browserTarget\": \"project-template:build:production\"\n                        }\n                    }\n                },\n                \"extract-i18n\": {\n                    \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n                    \"options\": {\n                        \"browserTarget\": \"project-template:build\"\n                    }\n                },\n                \"test\": {\n                    \"builder\": \"@angular-devkit/build-angular:karma\",\n                    \"options\": {\n                        \"main\": \"src/test.ts\",\n                        \"polyfills\": \"src/polyfills.ts\",\n                        \"tsConfig\": \"src/tsconfig.spec.json\",\n                        \"karmaConfig\": \"src/karma.conf.js\",\n                        \"styles\": [\"src/styles.scss\"],\n                        \"scripts\": [],\n                        \"assets\": [\"src/favicon.ico\", \"src/assets\"]\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": [\"src/tsconfig.app.json\", \"src/tsconfig.spec.json\"],\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        },\n        \"project-template-e2e\": {\n            \"root\": \"e2e/\",\n            \"projectType\": \"application\",\n            \"prefix\": \"\",\n            \"architect\": {\n                \"e2e\": {\n                    \"builder\": \"@angular-devkit/build-angular:protractor\",\n                    \"options\": {\n                        \"protractorConfig\": \"e2e/protractor.conf.js\",\n                        \"devServerTarget\": \"project-template:serve\"\n                    },\n                    \"configurations\": {\n                        \"production\": {\n                            \"devServerTarget\": \"project-template:serve:production\"\n                        }\n                    }\n                },\n                \"lint\": {\n                    \"builder\": \"@angular-devkit/build-angular:tslint\",\n                    \"options\": {\n                        \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n                        \"exclude\": [\"**/node_modules/**\"]\n                    }\n                }\n            }\n        }\n    },\n    \"defaultProject\": \"project-template\"\n}\n",
    "package.json": "{\n  \"name\": \"project-template\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^12.2.13\",\n    \"@angular/cdk\": \"^12.2.13\",\n    \"@angular/common\": \"^12.2.13\",\n    \"@angular/compiler\": \"^12.2.13\",\n    \"@angular/core\": \"^12.2.13\",\n    \"@angular/forms\": \"^12.2.13\",\n    \"@angular/platform-browser\": \"^12.2.13\",\n    \"@angular/platform-browser-dynamic\": \"^12.2.13\",\n    \"@angular/router\": \"^12.2.13\",\n    \"@ng-select/ng-select\": \"^6.1.0\",\n    \"core-js\": \"^2.5.4\",\n    \"rxjs\": \"^6.5.4\",\n    \"zone.js\": \"~0.11.4\",\n    \"@healthcatalyst/cashmere\": \"*\",\n    \"notosans-fontface\": \"^1.2.4\",\n    \"font-awesome\": \"4.7.0\",\n    \"sugar\": \"^2.0.6\",\n    \"lodash\": \"^4.17.21\",\n    \"change-case\": \"^4.1.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~0.1102.14\",\n    \"@angular/cli\": \"^12.2.13\",\n    \"@angular/compiler-cli\": \"12.2.13\",\n    \"@angular/language-service\": \"12.2.13\",\n    \"@types/node\": \"^12.11.1\",\n    \"@types/jasmine\": \"~3.6.0\",\n    \"@types/jasminewd2\": \"~2.0.3\",\n    \"codelyzer\": \"~4.5.0\",\n    \"jasmine-core\": \"~3.6.0\",\n    \"jasmine-spec-reporter\": \"~4.2.1\",\n    \"karma\": \"~6.3.3\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"~4.0.0\",\n    \"karma-jasmine-html-reporter\": \"^1.5.0\",\n    \"protractor\": \"~5.4.0\",\n    \"ts-node\": \"6.1.7\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~4.3.5\"\n  }\n}\n",
    "src/.browserslistrc": "# This file is currently used by autoprefixer to adjust CSS to support the below specified browsers\n# For additional information regarding the format and rule options, please see:\n# https://github.com/browserslist/browserslist#queries\n#\n# For IE 9-11 support, please remove 'not' from the last line of the file and adjust as needed\n\n> 0.5%\nlast 2 versions\nFirefox ESR\nnot dead\nnot IE 9-11",
    "src/app/app-routing.module.ts": "import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {ExampleContainerComponent} from './example-container.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ExampleContainerComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
    "src/app/app.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    template: '<router-outlet></router-outlet>',\n    styleUrls: ['../styles.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {}\n",
    "src/app/app.module.ts": "import {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ExampleContainerComponent} from './example-container.component';\nimport {CashmereModule} from './cashmere.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {PicklistRemoteDataExampleModule} from './picklist-remote-data/picklist-remote-data-example.module';\n\n@NgModule({\n    declarations: [AppComponent, ExampleContainerComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        CashmereModule,\n        PicklistRemoteDataExampleModule\n    ],\n    providers: [],\n    entryComponents: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
    "src/app/cashmere.module.ts": "import {NgModule} from '@angular/core';\nimport {\n    AccordionModule,\n    AppSwitcherModule,\n    BreadcrumbsModule,\n    BannerModule,\n    ButtonModule,\n    ButtonToggleModule,\n    CheckboxModule,\n    ChipModule,\n    DatepickerModule,\n    DateRangeModule,\n    DrawerModule,\n    EnvSwitcherModule,\n    FormFieldModule,\n    IconModule,\n    InputModule,\n    ListModule,\n    ModalModule,\n    NavbarModule,\n    PaginationModule,\n    PicklistOldModule,\n    PicklistModule,\n    PipesModule,\n    PopModule,\n    ProgressIndicatorsModule,\n    RadioButtonModule,\n    ScrollNavModule,\n    SelectModule,\n    SortModule,\n    StepperModule,\n    SubnavModule,\n    TabsModule,\n    TableModule,\n    TileModule,\n    ToasterModule,\n    TypeformSurveyModule\n} from '@healthcatalyst/cashmere';\nimport {ChangeCasePipeModule} from '../bit/change-case-pipe/change-case-pipe.module';\n\n@NgModule({\n    exports: [\n        AccordionModule,\n        AppSwitcherModule,\n        BreadcrumbsModule,\n        BannerModule,\n        ButtonModule,\n        ButtonToggleModule,\n        CheckboxModule,\n        ChipModule,\n        DatepickerModule,\n        DateRangeModule,\n        DrawerModule,\n        EnvSwitcherModule,\n        FormFieldModule,\n        IconModule,\n        InputModule,\n        ListModule,\n        ModalModule,\n        NavbarModule,\n        PaginationModule,\n        PicklistOldModule,\n        PicklistModule,\n        PipesModule,\n        PopModule,\n        ProgressIndicatorsModule,\n        RadioButtonModule,\n        ScrollNavModule,\n        SelectModule,\n        SortModule,\n        StepperModule,\n        SubnavModule,\n        TableModule,\n        TabsModule,\n        TileModule,\n        ToasterModule,\n        TypeformSurveyModule,\n        ChangeCasePipeModule\n    ]\n})\nexport class CashmereModule {}\n",
    "src/app/example-container.component.ts": "/* eslint-disable @angular-eslint/component-selector */\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-example-container',\n    template: '<hc-example></hc-example>'\n})\nexport class ExampleContainerComponent {}\n",
    "src/assets/.gitkeep": "",
    "src/environments/environment.prod.ts": "export const environment = {\n    production: true\n};\n",
    "src/environments/environment.ts": "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n",
    "src/index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>ProjectTemplate</title>\n  <base href=\"/\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>\n",
    "src/main.ts": "import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n",
    "src/polyfills.ts": "/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\nimport 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\nimport 'core-js/es6/string';\n// import 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es7/array';\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es6/reflect';\nimport 'core-js/es7/reflect';\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js'; // Included with Angular CLI.\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n// (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n// (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n// (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n/*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n",
    "src/styles.scss": "$fa-font-path: 'node_modules/font-awesome/fonts';\n@import '~font-awesome/scss/font-awesome';\n\n$notosans-fontface-path: \"node_modules/notosans-fontface/fonts\";\n@import \"~notosans-fontface/scss/notosans-fontface-allweight\";\n\n$hc-icons-font-path: 'node_modules/@healthcatalyst/cashmere/hcicons';\n@import '~@healthcatalyst/cashmere/hcicons/hcicons';\n\n@import '~@healthcatalyst/cashmere/scss/cashmere';\n\n// global styles for stackblitz examples\n.demo-button {\n    margin-top: 10px !important;\n    margin-right: 10px !important;\n}\n\nhc-example-viewer .hc-tab-content-horizontal {\n    padding: 3px;\n}\n\n.pipe-output {\n    font-weight: 600px;\n    font-size: 22px;\n}\n",
    "src/tsconfig.app.json": "{\n    \"extends\": \"../tsconfig.json\",\n    \"compilerOptions\": {\n        \"outDir\": \"../out-tsc/app\",\n        \"types\": []\n    },\n    \"exclude\": [\"test.ts\", \"**/*.spec.ts\"]\n}\n",
    "stackblitz.md": "This directory contains the Angular CLI project files used in the StackBlitz. For the most part, you should not need to edit files in this directory.\n\nTwo exceptions worth noting:\n- `styles.scss` contains global styles for the examples, there may be occasion to add these occasionally\n- `package.json` tweak this if it is determined that a particular third-party library should be preoloaded for a stackblitz example\n\nFor more detail on working with examples, see https://cashmere.healthcatalyst.net/guides/working-with-examples.",
    "tsconfig.json": "{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        \"baseUrl\": \"./\",\n        \"outDir\": \"./dist/out-tsc\",\n        \"sourceMap\": true,\n        \"declaration\": false,\n        \"module\": \"es2015\",\n        \"moduleResolution\": \"node\",\n        \"experimentalDecorators\": true,\n        \"target\": \"es5\",\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"lib\": [\"es2018\", \"dom\"]\n    },\n    \"angularCompilerOptions\": {\n        \"enableIvy\": true\n    }\n}\n",
    "src/app/picklist-remote-data/picklist-remote-data-example.component.html": "<p>\n    For cases with very large numbers of available options, you connect the picklist to a remote data source and take advantage of virtual\n    scrolling.\n</p>\n<br />\n\n<hc-picklist\n    [items]=\"people$ | async\"\n    bindLabel=\"name\"\n    [addCustomItem]=\"addCustomItemFn\"\n    [trackByFn]=\"trackByFn\"\n    [leftPaneLoading]=\"peopleLoading\"\n    searchPlaceholder=\"Search by name\"\n    [externalSearchSubject]=\"peopleInput$\"\n    [externalTotalOptionCount]=\"remoteCount\"\n    [virtualScroll]=\"true\"\n    [(ngModel)]=\"selectedPersons\"\n    (change)=\"onChange()\"\n></hc-picklist>\n\n<br />\n<p>\n    Selected:\n    <code>{{ selectedPersons | json }}</code>\n</p>\n",
    "src/app/picklist-remote-data/picklist-remote-data-example.component.ts": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {concat, Observable, of, Subject} from 'rxjs';\nimport {PicklistRemoteDataService, Person} from './picklist-remote-data.service';\nimport {catchError, distinctUntilChanged, switchMap, tap} from 'rxjs/operators';\nimport {PicklistComponent} from '@healthcatalyst/cashmere';\n\n@Component({\n    selector: 'hc-picklist-remote-data-example',\n    templateUrl: './picklist-remote-data-example.component.html'\n})\nexport class PicklistRemoteDataExampleComponent implements OnInit {\n    @ViewChild(PicklistComponent) picklist: PicklistComponent;\n    people$: Observable<Person[]>;\n    peopleLoading = true;\n    peopleInput$ = new Subject<string>();\n    selectedPersons: Person[] = this.dataService.mockPeople.slice(0, 2);\n    remoteCount = this.dataService.mockPeople.length - this.selectedPersons.length;\n    // using .bind() to maintain a scope that allows me access to the dataService in a callback function\n    addCustomItemFn = this.addCustomItem.bind(this);\n\n    constructor(public dataService: PicklistRemoteDataService) {}\n\n    ngOnInit(): void {\n        this.loadPeople();\n    }\n\n    trackByFn(item: Person): string {\n        return item.id;\n    }\n\n    addCustomItem(term: string): Person {\n        const customItem = {\n            id: `1234-${term}`,\n            age: Math.floor(Math.random() * 40) + 18,\n            name: term\n        };\n        this.dataService.mockPeople.push(customItem);\n        return customItem;\n    }\n\n    onChange(): void {\n        this.remoteCount = this.dataService.mockPeople.length - this.selectedPersons.length;\n        if (this.picklist.leftPaneIsEmpty && this.remoteCount > 0) {\n            this.peopleLoading = true;\n            this.loadPeople();\n        }\n    }\n\n    private loadPeople() {\n        this.people$ = concat(\n            of([]), // default items\n            this.peopleInput$.pipe(\n                distinctUntilChanged(),\n                tap(() => (this.peopleLoading = true)),\n                switchMap(term =>\n                    this.dataService.getPeople(term, this.selectedPersons).pipe(\n                        catchError(() => of([])), // empty list on error\n                        tap(() => {\n                            this.peopleLoading = false;\n                        })\n                    )\n                )\n            )\n        );\n    }\n}\n",
    "src/app/picklist-remote-data/picklist-remote-data-example.module.ts": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CashmereModule} from '../cashmere.module';\nimport {PicklistRemoteDataExampleComponent} from './picklist-remote-data-example.component';\nimport {PicklistRemoteDataService} from './picklist-remote-data.service';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, CashmereModule],\n    declarations: [PicklistRemoteDataExampleComponent],\n    entryComponents: [PicklistRemoteDataExampleComponent],\n    exports: [PicklistRemoteDataExampleComponent],\n    providers: [PicklistRemoteDataService]\n})\nexport class PicklistRemoteDataExampleModule {}\n",
    "src/app/picklist-remote-data/picklist-remote-data.service.ts": "import {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {delay} from 'rxjs/operators';\n\nexport interface Person {\n    id: string;\n    age: number;\n    name: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PicklistRemoteDataService {\n    mockPeople = names.map((n, index) => {\n        return {\n            id: `1234${index}`,\n            age: Math.floor(Math.random() * 40) + 18,\n            name: n\n        };\n    });\n\n    getPeople(term = '', selectedPersons: Array<Person>): Observable<Person[]> {\n        let items = this.mockPeople.filter(mp => !selectedPersons.some(sp => sp.id === mp.id));\n        if (term) {\n            items = items.filter(x => x.name.toLocaleLowerCase().indexOf(term.toLocaleLowerCase()) > -1).slice(0, 50);\n        } else {\n            items = items.slice(0, 50);\n        }\n        return of(items).pipe(delay(1000));\n    }\n}\n\nconst names = [\n    'Karyn Wright',\n    'Rochelle Estes',\n    'Mendoza Ruiz',\n    'Rosales Russell',\n    'Marquez Nolan',\n    'Franklin James',\n    'Elsa Bradley',\n    'Pearson Thompson',\n    'Ina Pugh',\n    'Nguyen Elliott',\n    'Mills Barnett',\n    'Margaret Reynolds',\n    'Yvette Navarro',\n    'Elisa Guzman',\n    'Jodie Bowman',\n    'Diann Booker',\n    'Harriet Hamilton',\n    'Ruby Pearce',\n    'Zoe Stewart',\n    'Zoey Ellis',\n    'Evelyn Harvey',\n    'Matthew Spencer',\n    'Sebastian Gray',\n    'Aiden Bell',\n    'Braxton Watson',\n    'Justin Wright',\n    'Hayley Baker',\n    'Alyssa James',\n    'Emily Rogers',\n    'Sarah Elliott',\n    'Lily White',\n    'Penelope Webb',\n    'Harriet Fowler',\n    'Amelia Campbell',\n    'Maryam Blair',\n    'Elsie Fern',\n    'Toby James',\n    'James Harris',\n    'Liam Duncan',\n    'Joshua Bailey',\n    'Blake Thompson',\n    'Jesse Tanner',\n    'Noah McDonald',\n    'Bodhi Bell',\n    'Harley Horner',\n    'Archer Hansen',\n    'Ivy Wright',\n    'Millie Tran',\n    'Elena Flanagan',\n    'Poppy Cooper',\n    'Florence Simpson',\n    'Mikayla Nevin',\n    'Eliana Martin',\n    'Bella Clemens',\n    'Isabella Stevens',\n    'Matilda Connell',\n    'Aaron Parker',\n    'Declan Horner',\n    'Harrison Gilbert',\n    'Arlo Johnson',\n    'Ethan Hughes',\n    'Noah Ronin',\n    'Aidan Lucas',\n    'Maxwell Tanner',\n    'Spencer Thompson',\n    'Blake McLean',\n    'Sienna Weaving',\n    'Aria Butler',\n    'Scarlett Wynter',\n    'Mariam Brown',\n    'Abigail Horner',\n    'Natalie Madden',\n    'Eliana Phillips',\n    'Amy Richardson',\n    'Caitlin Harrison',\n    'Ruby Holt',\n    'Leon Kennedy',\n    'Benjamin Morgan',\n    'Alex Crowe',\n    'Spencer Wilson',\n    'Vincent Weaver',\n    'Chase Ryan',\n    'Kai King',\n    'Finn Palmer',\n    'Lachlan Moore',\n    'Leo Matthews',\n    'Sadie Walsman',\n    'Harriet Roberts',\n    'Molly Smith',\n    'Leah Noble',\n    'Florence Robbinson',\n    'Eliana Thompson',\n    'Sophie Swan',\n    'Amelie Helman',\n    'Matilda Quin',\n    'Eleanor Harrison',\n    'Seth Bennett',\n    'Sonny Fern',\n    'Cody Mason',\n    'Ethan Irwin',\n    'David Knight',\n    'Koby Richardson',\n    'Toby Whitworth',\n    'Thomas Crowe',\n    'Oliver Rogers',\n    'Hunter Tanner',\n    'Frances Levine',\n    'Peggy Gregory',\n    'Rosie Love',\n    'Wanda Wiggins',\n    'Deborah Park',\n    'Sheryl Lowery',\n    'Sheri Rose',\n    'Audrey Watkins',\n    'Angelica Lawrence',\n    'Megan Blevins',\n    'Angelo Barrett',\n    'Thomas Woods',\n    'Morris Britt',\n    'Alex Dean',\n    'Louis Freeman',\n    'Alfred Heath',\n    'Clifford Terrell',\n    'Calvin Buckley',\n    'Aaron Marshall',\n    'Giovanni Cash'\n];\n"
}
